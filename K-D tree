import random
import time
import matplotlib.pyplot as plt

class KdNode:
    def __init__(self, point):
        self.point = point
        self.left = None
        self.right = None
        self.axis = None
        self.parent = None

class KdTree:
    def __init__(self, k=2):
        self.root = None
        self.k = k
        self.size = 0

    def insert(self, point):
        """Insert a point into the tree."""
        # Create a new node for the point
        node = KdNode(point)

        # If the tree is empty, make this the root node
        if self.root is None:
            self.root = node
            self.size += 1
            return

        # Start at the root and find the appropriate leaf node to insert the point
        curr = self.root
        while curr:
            # Compare point with current node
            axis = curr.axis
            if point[axis] < curr.point[axis]:
                if curr.left is None:
                    curr.left = node
                    node.parent = curr
                    break
                curr = curr.left
            else:
                if curr.right is None:
                    curr.right = node
                    node.parent = curr
                    break
                curr = curr.right

        # Update the axis for the new leaf node
        node.axis = (curr.axis + 1) % self.k

        # Increase the size of the tree
        self.size += 1

    def range(self, lower_bound, upper_bound):
        """
        Find all points in the tree within a range of values.
        The range is specified by two tuples, one for the lower bound
        and one for the upper bound, on each dimension
        """
        def range_query(node):
            """helper function that traverse the tree and check each node within the bounding box"""
            if node is None:
                return

            # check if the current point is within the range
            point_within_range = True
            for i in range(self.k):
                if lower_bound[i] > node.point[i] or upper_bound[i] < node.point[i]:
                    point_within_range = False
                    break
            if point_within_range:
                results.append(node.point)

            # check if the left subtree has points within the range
            if lower_bound[node.axis] <= node.point[node.axis]:
                range_query(node.left)

            # check if the right subtree has points within the range
            if upper_bound[node.axis] > node.point[node.axis]:
                range_query(node.right)

        # Initialize an empty list to store the results
        results = []

        # Call the helper function to traverse the tree
        range_query(self.root)

        return results

    def nearest_neighbor(self, point):
        """
        Find the nearest point in the tree to the given point
        """
        def distance(p1, p2):
            """helper function that calculates Euclidean distance between two points"""
            dist = 0
            for i in range(self.k):
                dist += (p1[i] - p2[i]) ** 2
            return dist ** 0.5

        def nearest_neighbor_query(node, point, curr_best):
            """helper function that traverse the tree and check each node to find the nearest point"""
            if node is None:
                return curr_best

            # update curr_best if the current point is closer to the target point
            curr_dist = distance(point, node.point)
            if curr_dist < distance(point, curr_best):
                curr_best = node.point

            # check the left and right subtrees
            next_best = curr_best
            if node.left and point[node.axis] <= node.point[node.axis]:
                next_best = nearest_neighbor_query(node.left, point, next_best)

            if node.right and point[node.axis] > node.point[node.axis]:
                next_best = nearest_neighbor_query(node.right, point, next_best)

            # check the hyperplane
            if (next_best == curr_best or
                    distance(node.point, (point[0], point[1])) < distance(next_best, point)):
                next_best = nearest_neighbor_query(node.right if point[node.axis] > node.point[node.axis] else node.left, point, next_best)

            return next_best
        
        return nearest_neighbor_query(self.root, point, self.root.point)

# Number of points in the dataset
n = 10000

# Generate a random dataset of points
points = [(random.random(), random.random()) for _ in range(n)]

# Construct the k-d tree
kdtree = KdTree()
for point in points:
    kdtree.insert(point)

# Define a range to query
lower_bound = (0.2, 0.2)
upper_bound = (0.8, 0.8)

# Measure the time it takes to perform a range query using the k-d tree method
start_time = time.time()
kdtree_results = kdtree.range(lower_bound, upper_bound)
end_time = time.time()
kdtree_time = end_time - start_time

# Measure the time it takes to perform a range query using the naive method
start_time = time.time()
naive_results = [point for point in points if lower_bound[0] <= point[0] <= upper_bound[0] and lower_bound[1] <= point[1] <= upper_bound[1]]
end_time = time.time()
naive_time = end_time - start_time

# Print the results
print(f'Number of points in the dataset: {n}')
print(f'Number of points in the range using k-d tree method: {len(kdtree_results)}')
print(f'Number of points in the range using naive method: {len(naive_results)}')
print(f'Execution time using k-d tree method: {kdtree_time}')
print(f'Execution time using naive method: {naive_time}')

# Plot the results
plt.plot([n, n], [kdtree_time, naive_time], 'o-')
plt.xlabel('Number of points in the dataset')
plt.ylabel('Execution time (seconds)')
plt.legend(['k-d tree method', 'naive method'])
plt.show()
